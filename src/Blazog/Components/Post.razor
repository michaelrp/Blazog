@inject HttpClient Http;
@inject IDataLoader Loader
@inject ILocalStorage Store
@inject NavigationManager NavigationManager

<h1>@postInfo.Title</h1>
<h6>@postInfo.Date</h6>
<p><TagLinks Tags="@postInfo.Tags"></TagLinks></p>
<hr />

<PostContent>@((MarkupString)html)</PostContent>

@* <div class="d-flex justify-content-center mt-4">
    <NavLink class="btn btn-outline-secondary mr-3" href="@($"/posts/{postInfo.PreviousLabel}")"
        title="@postInfo.PreviousTitle" Match="NavLinkMatch.All">
        <span class="oi oi-chevron-left"></span> Previous
    </NavLink>
    <NavLink class="btn btn-outline-secondary ml-3" href="@($"/posts/{postInfo.NextLabel}")"
        title="@postInfo.NextTitle" Match="NavLinkMatch.All">
        Next <span class="oi oi-chevron-right"></span>
    </NavLink>
</div> *@

@code {
    [Parameter]
    public string Label { get; set; }
    private PostInfo postInfo;
    private PostDoc postDoc;
    private string html = "<div>Loading...</div>";

    protected override void OnInitialized()
    {
        postInfo = new PostInfo {
            Title = "",
            Tags = new string[] {}
        };
    }

    protected override async Task OnParametersSetAsync()
    {
        if(string.IsNullOrEmpty(Label))
        {
            NavigationManager.NavigateTo("/posts");
        }

        postInfo = (await Store.GetPostInfosAsync()).FirstOrDefault(p => p.Label == Label);
        postDoc = await Store.GetPostDocAsync(Label);

        if(postDoc == null || postInfo.Hash != postDoc.Hash)
        {
            postDoc = await Loader.LoadPost(Label);
        }

        html = postDoc.GetContentHtml();
    }
}